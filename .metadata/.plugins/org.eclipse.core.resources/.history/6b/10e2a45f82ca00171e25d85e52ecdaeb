/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * This contains the period callback functions for the periodic scheduler
 *
 * @warning
 * These callbacks should be used for hard real-time system, and the priority of these
 * tasks are above everything else in the system (above the PRIORITY_CRITICAL).
 * The period functions SHOULD NEVER block and SHOULD NEVER run over their time slot.
 * For example, the 1000Hz take slot runs periodically every 1ms, and whatever you
 * do must be completed within 1ms.  Running over the time slot will reset the system.
 */

#include <_can_dbc/generated_can.h>
#include <stdint.h>
#include "io.hpp"
#include "periodic_callback.h"
#include "can.h"
#include "switches.hpp"
#include "string.h"
#include "printf_lib.h"
#include "obstacle_avoidance.h"

Switches& SW_obj = Switches::getInstance();

/// This is the stack size used for each of the period tasks (1Hz, 10Hz, 100Hz, and 1000Hz)
const uint32_t PERIOD_TASKS_STACK_SIZE_BYTES = (512 * 4);

/**
 * This is the stack size of the dispatcher task that triggers the period tasks to run.
 * Minimum 1500 bytes are needed in order to write a debug file if the period tasks overrun.
 * This stack size is also used while calling the period_init() and period_reg_tlm(), and if you use
 * printf inside these functions, you need about 1500 bytes minimum
 */
const uint32_t PERIOD_MONITOR_TASK_STACK_SIZE_BYTES = (512 * 3);

const uint32_t            SENSOR_SONARS__MIA_MS = 2000;
const SENSOR_SONARS_t     SENSOR_SONARS__MIA_MSG = { 999 };
const uint32_t            INITIAL_END__MIA_MS = 9000000;
const INITIAL_END_t       INITIAL_END__MIA_MSG = {0};
const uint32_t            GPS_DESTINATION__MIA_MS = 5011;
//const GPS_DESTINATION_t   GPS_DESTINATION__MIA_MSG = {0};

/// Called once before the RTOS is started, this is a good place to initialize things once
bool period_init(void)
{
	//initializing the CAN bus
	CAN_init(can1, 100, 5, 5, nullptr, nullptr);
	//if receiving enable this code
	CAN_bypass_filter_accept_all_msgs();
	//resetting
	CAN_reset_bus(can1);

	//To be removed after integration
	SW_obj.init();
	return true; // Must return true upon success
}

/// Register any telemetry variables
bool period_reg_tlm(void)
{
    // Make sure "SYS_CFG_ENABLE_TLM" is enabled at sys_config.h to use Telemetry
    return true; // Must return true upon success
}

void period_1Hz(uint32_t count)
{
	if(CAN_is_bus_off(can1))
		CAN_reset_bus(can1);
}

bool dbc_app_send_can_msg(uint32_t mid, uint8_t dlc, uint8_t bytes[8])
{
	can_msg_t msg;
	msg.msg_id = mid;
	msg.frame_fields.data_len = dlc;
	msg.frame_fields.is_29bit = 0;
	msg.frame_fields.is_rtr = 0;

	memcpy(msg.data.bytes, bytes, dlc);

	return CAN_tx(can1, &msg , 2);

}
void period_10Hz(uint32_t count)
{

}

void period_100Hz(uint32_t count)
{
	can_msg_t received_CAN1_msg= {0};
			dbc_msg_hdr_t can_msg_hdr;

	MOTOR_SIGNAL_t *motor_msg_to_send;
	static SENSOR_SONARS_t sensor_msg_decoded = {0};
	static GPS_DESTINATION_t gps_msg_decoded = {0};
	static INITIAL_END_t initial_end_decode = {0};

	if (!CAN_is_bus_off(can1))
	{
		//Receive Sensor Data
		if(CAN_rx(can1, &received_CAN1_msg, 0))
		{
			can_msg_hdr.dlc = received_CAN1_msg.frame_fields.data_len;
			can_msg_hdr.mid = received_CAN1_msg.msg_id;

			if(received_CAN1_msg.msg_id == INITIAL_END_HDR.mid)
				dbc_decode_INITIAL_END(&initial_end_decode, received_CAN1_msg.data.bytes,&can_msg_hdr);
			else if(received_CAN1_msg.msg_id == GPS_DESTINATION_HDR.mid)
				dbc_decode_GPS_DESTINATION(&gps_msg_decoded, received_CAN1_msg.data.bytes,&can_msg_hdr);
			else if(received_CAN1_msg.msg_id == SENSOR_SONARS_HDR.mid)
				dbc_decode_SENSOR_SONARS(&sensor_msg_decoded, received_CAN1_msg.data.bytes,&can_msg_hdr);
		}
		else
		{
			// MIA Handling
			if(received_CAN1_msg.msg_id != SENSOR_SONARS_HDR.mid)
				dbc_handle_mia_SENSOR_SONARS(&sensor_msg_decoded, 10);
			if(received_CAN1_msg.msg_id != GPS_DESTINATION_HDR.mid)
				dbc_handle_mia_GPS_DESTINATION(&gps_msg_decoded, 10);
			if(received_CAN1_msg.msg_id != INITIAL_END_HDR.mid)
				dbc_handle_mia_INITIAL_END(&initial_end_decode, 1);
		}
	}
	else
		CAN_reset_bus(can1);


	//LED1 - Sensor_MIA, LED2- GPS_MIA, LED3-BLuetooth MIA
	LE.set(1, (bool)sensor_msg_decoded.mia_info.is_mia);
	LE.set(2,gps_msg_decoded.mia_info	.is_mia);
	LE.set(3,initial_end_decode.mia_info.is_mia);


	motor_msg_to_send = (MOTOR_SIGNAL_t *)set_motor_direction_and_speed(get_left_state(sensor_msg_decoded.SENSOR_SONARS_left), get_center_state(sensor_msg_decoded.SENSOR_SONARS_middle), get_right_state(sensor_msg_decoded.SENSOR_SONARS_right), get_rear_state(sensor_msg_decoded.SENSOR_SONARS_rear));

	// If any of the GPS, Sensor module is disconnected or blue tooth App stop command occurs
	 if((initial_end_decode.FLAG || sensor_msg_decoded.mia_info.is_mia /*||gps_msg_decoded.mia_info.is_mia*/) ==1)
		 motor_msg_to_send->MOTOR_DRIVE_SPEED = 0;

	// Send Motor Signal
	dbc_encode_and_send_MOTOR_SIGNAL(motor_msg_to_send);
}

void period_1000Hz(uint32_t count)
{
  //  LE.toggle(4);
}

/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * This contains the period callback functions for the periodic scheduler
 *
 * @warning
 * These callbacks should be used for hard real-time system, and the priority of these
 * tasks are above everything else in the system (above the PRIORITY_CRITICAL).
 * The period functions SHOULD NEVER block and SHOULD NEVER run over their time slot.
 * For example, the 1000Hz take slot runs periodically every 1ms, and whatever you
 * do must be completed within 1ms.  Running over the time slot will reset the system.
 */

#include <stdint.h>
#include "io.hpp"
#include "periodic_callback.h"
#include "_can_dbc/generated_can.h"
#include "can.h"
#include "switches.hpp"
#include "string.h"
#include "printf_lib.h"
//#include "obstacle_avoidance.cpp"

Switches& SW_obj = Switches::getInstance();

/// This is the stack size used for each of the period tasks (1Hz, 10Hz, 100Hz, and 1000Hz)
const uint32_t PERIOD_TASKS_STACK_SIZE_BYTES = (512 * 4);

/**
 * This is the stack size of the dispatcher task that triggers the period tasks to run.
 * Minimum 1500 bytes are needed in order to write a debug file if the period tasks overrun.
 * This stack size is also used while calling the period_init() and period_reg_tlm(), and if you use
 * printf inside these functions, you need about 1500 bytes minimum
 */
const uint32_t PERIOD_MONITOR_TASK_STACK_SIZE_BYTES = (512 * 3);

const uint32_t            SENSOR_SONARS__MIA_MS = 1000;
const SENSOR_SONARS_t     SENSOR_SONARS__MIA_MSG = { 999 };
const uint32_t            INITIAL_END__MIA_MS = 1000;
const INITIAL_END_t       INITIAL_END__MIA_MSG = {0 };
const uint32_t            GPS_DESTINATION__MIA_MS = 1000;
const GPS_DESTINATION_t   GPS_DESTINATION__MIA_MSG = {0};

MOTOR_SIGNAL_t obstacle_avoidance(SENSOR_SONARS_t sensor_msg_temp);

/// Called once before the RTOS is started, this is a good place to initialize things once
bool period_init(void)
{
	//initializing the CAN bus
	CAN_init(can1, 100, 5, 5, nullptr, nullptr);
	//if receiving enable this code
	CAN_bypass_filter_accept_all_msgs();
	//resetting
	CAN_reset_bus(can1);

	//To be removed after integration
	SW_obj.init();
	return true; // Must return true upon success
}

/// Register any telemetry variables
bool period_reg_tlm(void)
{
    // Make sure "SYS_CFG_ENABLE_TLM" is enabled at sys_config.h to use Telemetry
    return true; // Must return true upon success
}

void period_1Hz(uint32_t count)
{
	if(CAN_is_bus_off(can1))
		CAN_reset_bus(can1);
}

bool dbc_app_send_can_msg(uint32_t mid, uint8_t dlc, uint8_t bytes[8])
{
	can_msg_t msg;
	msg.msg_id = mid;
	msg.frame_fields.data_len = dlc;
	msg.frame_fields.is_29bit = 0;
	msg.frame_fields.is_rtr = 0;

	memcpy(msg.data.bytes, bytes, dlc);

	return CAN_tx(can1, &msg , 10);

}
void period_10Hz(uint32_t count)
{

}

void period_100Hz(uint32_t count)
 {
	can_msg_t received_CAN1_msg;
	dbc_msg_hdr_t can_msg_hdr;

	static MOTOR_SIGNAL_t motor_msg_to_send = { 0 };
	static SENSOR_SONARS_t sensor_msg_decoded = {0};
	static GPS_DESTINATION_t gps_msg_decoded = {0};
	static INITIAL_END_t initial_end_decode = {0};

	if (!CAN_is_bus_off(can1))
	{
		//Receive Sensor Data
		if(CAN_rx(can1, &received_CAN1_msg, 0))
		{
			can_msg_hdr.dlc = received_CAN1_msg.frame_fields.data_len;
			can_msg_hdr.mid = received_CAN1_msg.msg_id;

			if(received_CAN1_msg.msg_id == INITIAL_END_HDR.mid)
				dbc_decode_INITIAL_END(&initial_end_decode, received_CAN1_msg.data.bytes,&can_msg_hdr);
			else if(received_CAN1_msg.msg_id == GPS_DESTINATION_HDR.mid)
				dbc_decode_GPS_DESTINATION(&gps_msg_decoded, received_CAN1_msg.data.bytes,&can_msg_hdr);
			else if(received_CAN1_msg.msg_id == SENSOR_SONARS_HDR.mid)
				dbc_decode_SENSOR_SONARS(&sensor_msg_decoded, received_CAN1_msg.data.bytes,&can_msg_hdr);

		}
		dbc_handle_mia_SENSOR_SONARS(&sensor_msg_decoded, 10);
		dbc_handle_mia_GPS_DESTINATION(&gps_msg_decoded, 10);
		dbc_handle_mia_INITIAL_END(&initial_end_decode, 10);
	}
	else
		CAN_reset_bus(can1);

	motor_msg_to_send = obstacle_avoidance(sensor_msg_decoded);
	motor_msg_to_send.MOTOR_DRIVE_STOP = initial_end_decode.FLAG;
	dbc_encode_and_send_MOTOR_SIGNAL(&motor_msg_to_send);
}

uint16_t left_range;
uint16_t middle_range;
uint16_t right_range;
uint16_t rear_range;

void period_1000Hz(uint32_t count)
{
  //  LE.toggle(4);
}

//Obstacle avoidance algorithm
MOTOR_SIGNAL_t obstacle_avoidance(SENSOR_SONARS_t sensor_msg)
{
	MOTOR_SIGNAL_t obst_avoided_msg = { 0 };

	/* Ranges: 	Stop range (0): < 20 inches
	 * 			FullLeft/FullRight range (1): 21 - 110 inches
	 * 			SlightLeft/SlightRiht range (2): 111 - 200 inches
	 */
/*	uint16_t left_range;
	uint16_t middle_range;
	uint16_t right_range;
	uint16_t rear_range;*/

	//left sensor range calculation
	        if(sensor_msg.SENSOR_SONARS_left<=30)
				left_range = 0;
	        else if (sensor_msg.SENSOR_SONARS_left>30 && sensor_msg.SENSOR_SONARS_left<=80)
				left_range = 1;
	        else if (sensor_msg.SENSOR_SONARS_left>80 && sensor_msg.SENSOR_SONARS_left<=180)
				left_range = 2;
	        else
	        	left_range = 3;

	//middle sensor range calculation
	        if(sensor_msg.SENSOR_SONARS_middle<=30)
				middle_range = 0;
	        else if (sensor_msg.SENSOR_SONARS_middle>30 && sensor_msg.SENSOR_SONARS_middle<=80)
	        	middle_range = 1;
	        else if (sensor_msg.SENSOR_SONARS_middle>80 && sensor_msg.SENSOR_SONARS_middle<=180)
	        	middle_range = 2;
	        else
	        	middle_range = 3;

	//right sensor range calculation
	        if(sensor_msg.SENSOR_SONARS_right<=30)
				right_range = 0;
	        else if (sensor_msg.SENSOR_SONARS_right>30 && sensor_msg.SENSOR_SONARS_right<=80)
	        	right_range = 1;
	        else if (sensor_msg.SENSOR_SONARS_right>80 && sensor_msg.SENSOR_SONARS_right<=180)
	        	right_range = 2;
	        else
	        	right_range = 3;


	//u0_dbg_printf("%d %d %d",left_range,middle_range,right_range);

	//333 Go forward at medium speed
	       if(left_range == 3 && middle_range ==3 && right_range == 3)
	       {
	    	   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
	    	   obst_avoided_msg.MOTOR_STEER_STRAIGHT = 1;
	    	   obst_avoided_msg.MOTOR_STEER_ANGLE = 15.1;
	    	   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.37;
	    	   u0_dbg_printf("333 "); //Delete this later
	       }
	 //332/322 Slight left at medium speed
	       else if (left_range == 3 && (middle_range ==3 || middle_range == 2) && right_range == 2)
	       {
	    	   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
	    	   obst_avoided_msg.MOTOR_STEER_SLIGHT_LEFT = 1;
	    	   obst_avoided_msg.MOTOR_STEER_ANGLE = 12.6;
	    	   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.37;
	       }
	 //233/223 Slight right at medium speed
	       else if (left_range == 2 && (middle_range ==3  || middle_range == 2) && right_range == 3)
		   {
	    	   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
	    	   obst_avoided_msg.MOTOR_STEER_SLIGHT_RIGHT = 1;
	    	   obst_avoided_msg.MOTOR_STEER_ANGLE = 17.5;
	    	   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.37;
		   }
	 //222 Go forward at slow speed
	       else if(left_range == 2 && middle_range == 2 && right_range == 2)
		   {
			   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
			   obst_avoided_msg.MOTOR_STEER_STRAIGHT = 1;
			   obst_avoided_msg.MOTOR_STEER_ANGLE = 15.1;
			   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.16;
			   u0_dbg_printf("222 "); //Delete this later
		   }
	 //221/211 full left at slow speed
		   else if ((left_range == 2 || left_range ==3 ) && (middle_range ==2 || middle_range == 1) && right_range == 1)
		   {
			   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
			   obst_avoided_msg.MOTOR_STEER_FULL_LEFT = 1;
			   obst_avoided_msg.MOTOR_STEER_ANGLE = 10.1;
			   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.16;
		   }
	 //122/112 full right at slow speed
		   else if (left_range == 1 && (middle_range ==1  || middle_range == 2) && (right_range == 2  || left_range ==3 ))
		   {
			   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
			   obst_avoided_msg.MOTOR_STEER_FULL_RIGHT = 1;
			   obst_avoided_msg.MOTOR_STEER_ANGLE = 19.8;
			   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.16;
		   }
	 //111 full right at slow speed
		   else if (left_range == 1 && (middle_range ==1  || middle_range == 2) && right_range == 2)
		   {
			   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 1;
			   obst_avoided_msg.MOTOR_STEER_FULL_RIGHT = 1;
			   obst_avoided_msg.MOTOR_STEER_ANGLE = 19.8;
			   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.16;
		   }
	 //If L/M/R any sensor has 0, then check for rear sensor and go reverse in slow speed if possible
		  /* else if(left_range == 0 || middle_range == 0 || left_range == 0)
		   {
			   //If there is no obstacle at rear of car then, reverse in full speed
			   if(rear_range == 3)
			   {
				   obst_avoided_msg.MOTOR_DRIVE_REVERSE = 1;
				   obst_avoided_msg.MOTOR_STEER_STRAIGHT = 1;
				   obst_avoided_msg.MOTOR_STEER_ANGLE = 15.1;
				   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.37;
				   obst_avoided_msg.MOTOR_
			   }
			   //If there is obstacle at rear of car but not immediately close then, reverse in slow speed
			   else if(rear_range == 2 || rear_range == 1)
			   {
				   obst_avoided_msg.MOTOR_DRIVE_REVERSE = 1;
				   obst_avoided_msg.MOTOR_STEER_STRAIGHT = 1;
				   obst_avoided_msg.MOTOR_STEER_ANGLE = 15.1;
				   obst_avoided_msg.MOTOR_DRIVE_SPEED = 17.16;
			   }
			   else
			   {
				   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 0;
				   obst_avoided_msg.MOTOR_STEER_STRAIGHT = 1;
				   obst_avoided_msg.MOTOR_STEER_ANGLE = 15.1;
				   obst_avoided_msg.MOTOR_DRIVE_SPEED = 15;
			   }
		   }*/
		   else
		   {
			   obst_avoided_msg.MOTOR_DRIVE_FORWARD = 0;
			   obst_avoided_msg.MOTOR_STEER_STRAIGHT = 1;
			   obst_avoided_msg.MOTOR_STEER_ANGLE = 15.1;
			   obst_avoided_msg.MOTOR_DRIVE_SPEED = 15;
		   }

	return obst_avoided_msg;
}

